
import os
import sys
import json
import base64
import tempfile
import subprocess
from datetime import datetime
from multiprocessing.dummy import Pool as ThreadPool

# Constants
DEFAULT_TARGET_FILE = "targets.txt"
NMAP_OUTPUT_FOLDER = "scan_outputs/nmap"
BASE_FOLDER = f"scan_outputs/{datetime.now().strftime('%Y%m%d_%H%M%S')}_scan"
THREADS = 10

# Ensure base folders exist
def setup_folders():
    os.makedirs(BASE_FOLDER, exist_ok=True)
    for subfolder in ["testssl_logs", "nikto_logs", "ffuf_logs", "ssh_audit_logs", "hydra_logs", "wafw00f_logs", "nmap"]:
        os.makedirs(os.path.join(BASE_FOLDER, subfolder), exist_ok=True)

# Run shell commands and log output
def run_command(cmd, output_file):
    try:
        with open(output_file, "w") as f:
            subprocess.run(cmd, shell=True, stdout=f, stderr=subprocess.STDOUT, timeout=600)
    except Exception as e:
        with open(output_file, "a") as f:
            f.write(f"\n[!] Error running command: {e}\n")

def run_parallel_scan(cmds, folder, label):
    print(f"[*] Running {label} scans in parallel...")
    pool = ThreadPool(THREADS)
    for cmd, name in cmds:
        outfile = os.path.join(folder, f"{name}.txt")
        pool.apply_async(run_command, args=(cmd, outfile))
    pool.close()
    pool.join()

# Nmap full scan
def run_nmap_scan(target_file):
    output_path = os.path.join(NMAP_OUTPUT_FOLDER, "nmap_scan")
    cmd = f"nmap -sS -sV -T4 -iL {target_file} -oA {output_path} -oX {output_path}.xml -oJ {output_path}.json"
    print(f"[*] Running Nmap scan...")
    subprocess.run(cmd, shell=True)
    return f"{output_path}.json"

# Parse Nmap JSON to get services per IP
def parse_nmap_json(nmap_json_file):
    targets = {"http": [], "https": [], "ssh": [], "ssl": []}
    try:
        with open(nmap_json_file) as f:
            data = json.load(f)

        for host in data.get("host", []):
            ip = None
            addresses = host.get("address", [])
            if isinstance(addresses, list):
                for addr_info in addresses:
                    if addr_info.get("addrtype") == "ipv4":
                        ip = addr_info.get("addr")
            elif isinstance(addresses, dict):
                ip = addresses.get("addr")

            if not ip:
                continue

            for port_info in host.get("ports", []):
                port = port_info.get("portid")
                service = port_info.get("service", {}).get("name", "").lower()
                state = port_info.get("state", {}).get("state")
                if state != "open":
                    continue

                proto = f"{ip}:{port}"

                if service in ["http", "http-alt"]:
                    targets["http"].append(proto)
                elif service in ["https", "https-alt", "ssl/http", "ssl"]:
                    targets["https"].append(proto)
                    targets["ssl"].append(proto)
                elif service == "ssh":
                    targets["ssh"].append(proto)
                elif "ssl" in service or "https" in service:
                    targets["ssl"].append(proto)

    except Exception as e:
        print(f"[!] Failed to parse Nmap JSON: {e}")
        sys.exit(1)

    return targets

# Decode base64 credentials
def decode_creds(base64_file):
    if not os.path.isfile(base64_file):
        print(f"[!] Base64 credentials file not found: {base64_file}")
        sys.exit(1)

    combos = []
    with open(base64_file, "r") as f:
        for line in f:
            try:
                decoded = base64.b64decode(line.strip()).decode()
                if ":" in decoded:
                    combos.append(decoded)
            except Exception as e:
                print(f"[!] Skipping invalid base64 line: {line.strip()} ({e})")
    return combos

# Prepare and run tools
def prepare_and_run_scans(targets):
    if not any(targets.values()):
        print("[!] No open ports found for any scan, exiting.")
        sys.exit(1)

    if targets["ssl"]:
        testssl_cmds = []
        for target in targets["ssl"]:
            ip, port = target.split(":")
            cmd = f"testssl.sh --warnings batch {ip}:{port}"
            testssl_cmds.append((cmd, f"{ip}_{port}"))
        run_parallel_scan(testssl_cmds, os.path.join(BASE_FOLDER, "testssl_logs"), "testssl")

    if targets["http"] or targets["https"]:
        nikto_cmds, ffuf_cmds, wafw00f_cmds = [], [], []
        for target in targets["http"] + targets["https"]:
            ip, port = target.split(":")
            url = f"http://{ip}:{port}"
            nikto_cmd = f"nikto -h {url}"
            ffuf_cmd = f"ffuf -u {url}/FUZZ -w /usr/share/wordlists/dirb/common.txt -mc all -of json -o {BASE_FOLDER}/ffuf_logs/{ip}_{port}.json"
            wafw00f_cmd = f"wafw00f {url}"
            nikto_cmds.append((nikto_cmd, f"{ip}_{port}"))
            ffuf_cmds.append((ffuf_cmd, f"{ip}_{port}"))
            wafw00f_cmds.append((wafw00f_cmd, f"{ip}_{port}"))

        run_parallel_scan(nikto_cmds, os.path.join(BASE_FOLDER, "nikto_logs"), "nikto")
        run_parallel_scan(ffuf_cmds, os.path.join(BASE_FOLDER, "ffuf_logs"), "ffuf")
        run_parallel_scan(wafw00f_cmds, os.path.join(BASE_FOLDER, "wafw00f_logs"), "wafw00f")

    if targets["ssh"]:
        ssh_audit_cmds = []
        for target in targets["ssh"]:
            ip, port = target.split(":")
            ssh_audit_cmd = f"ssh-audit {ip} -p {port}"
            ssh_audit_cmds.append((ssh_audit_cmd, f"{ip}_{port}"))
        run_parallel_scan(ssh_audit_cmds, os.path.join(BASE_FOLDER, "ssh_audit_logs"), "ssh-audit")

        base64_creds_file = "creds.txt"
        combos = decode_creds(base64_creds_file)
        with tempfile.NamedTemporaryFile(mode="w+", delete=False) as tmp:
            for combo in combos:
                tmp.write(combo + "\n")
            combo_file_path = tmp.name

        hydra_cmds = []
        for target in targets["ssh"]:
            ip, port = target.split(":")
            hydra_cmd = f"hydra -C {combo_file_path} -s {port} {ip} ssh"
            hydra_cmds.append((hydra_cmd, f"{ip}_{port}"))
        run_parallel_scan(hydra_cmds, os.path.join(BASE_FOLDER, "hydra_logs"), "hydra")

def main():
    print("=== Automated Pentest Scanner ===")
    setup_folders()

    target_file = input(f"Enter target file path [default: {DEFAULT_TARGET_FILE}]: ").strip()
    if not target_file:
        target_file = DEFAULT_TARGET_FILE

    if not os.path.isfile(target_file):
        print(f"[!] Target file '{target_file}' not found.")
        sys.exit(1)

    mode = input("Run full scan? (yes/no): ").strip().lower()
    if mode not in ["yes", "no"]:
        print("[!] Invalid choice.")
        sys.exit(1)

    json_output = run_nmap_scan(target_file)
    targets = parse_nmap_json(json_output)

    if mode == "yes":
        prepare_and_run_scans(targets)
    else:
        print("[*] Only Nmap scan completed. Other scans skipped.")

if __name__ == "__main__":
    main()
